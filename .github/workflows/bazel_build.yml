name: Build Bazel Targets

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            os_env_name: 'linux-64'
            python_version: '3.10'
            py_version: '310'
          - os: windows-latest
            os_env_name: 'win-64'
            python_version: '3.10'
            py_version: '310'
            compiler: msvc
          - os: macOS-latest
            os_env_name: 'osx-64'
            python_version: '3.10'
            py_version: '310'
    #          - os: macOS-latest
    #            os_env_name: 'osx-arm64'
    #            python_version: '3.10'
    #            arch: arm64

    runs-on: ${{ matrix.os }}
    name: "( os: ${{ runner.os }}, python: ${{ matrix.python_version }} )"
    #    name: ${{ matrix.os_env_name }}-py${{ matrix.python_version }}-bazel
    steps:
      - name: "Checkout Repo"
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: "Lowercase runner.os"
        run: |
          echo "RUNNER_OS_LOW=$(echo ${RUNNER_OS} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
        env:
          RUNNER_OS: ${{ runner.os }}
        shell: bash

      - name: "Mount bazel cache"
        uses: actions/cache@v3
        env:
          HOME: ${{ env.HOME }}
          USERNAME: ${{ env.USERNAME }}
        with:
          path: |
            /home/runner/.cache/bazel
            /home/runner/.cache/bazelisk
            /private/var/tmp
            C:/users/runneradmin/_bazel_runneradmin/
          key: bazel-${{ env.RUNNER_OS_LOW }}-${{ hashFiles('**/*.bzl', '**/*.BUILD') }}

      - name: "[windows] Setup MSVC"
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1.12.1

      - name: "[windows:clang] Add `msys64/mingw64` to PATH"
        shell: bash
        if: runner.os == 'Windows' && matrix.compiler == 'clang'
        run: echo "C:/msys64/mingw64/bin" >> $GITHUB_PATH

      - name: "[windows] Build Bazel Target"
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          curl -LO "https://github.com/redsun82/bazel/releases/download/vs-2022-fix-0.1/bazel-vs2022.exe"
          $BAZEL_VC = "${{ env.VCINSTALLDIR }}".replace('\', '/')
          if ("${{ matrix.compiler }}" -eq "msvc") {
            ./bazel-vs2022 build @pydin//:pydin-zip `
              --action_env=BAZEL_VC=$BAZEL_VC 
          }
          elseif ("${{ matrix.compiler }}" -eq "clang") {
            ./bazel-vs2022 build @pydin//:pydin-zip `
              --action_env=BAZEL_VC=$BAZEL_VC `
              --extra_toolchains=@local_config_cc//:cc-toolchain-x64_windows-clang-cl `
              --extra_execution_platforms=//:x64_windows-clang-cl 
          }

      - name: "[unix] Build Bazel Target"
        if: runner.os != 'Windows'
        shell: bash
        run: |
          if [[ "${RUNNER_OS}" == "Linux" ]]; then
            bazel build @pydin//:pydin-tar
            bazel test @pydin//tests:test_astrodynamics
          elif [[ "${RUNNER_OS}" == "macOS" ]]; then
            bazel build @pydin//:pydin-tar \
              --action_env=CC=$(brew --prefix llvm@15)/bin/clang \
              --action_env=CXX=$(brew --prefix llvm@15)/bin/clang++ \
              --action_env=LDFLAGS=${{ env.LDFLAGS }} \
              --action_env=CPPFLAGS=${{ env.CPPFLAGS }} \
              --action_env=BAZEL_LLVM=${{ env.BAZEL_LLVM }}
            bazel test @pydin//tests:test_astrodynamics \
              --action_env=CC=$(brew --prefix llvm@15)/bin/clang \
              --action_env=CXX=$(brew --prefix llvm@15)/bin/clang++ \
              --action_env=LDFLAGS=${{ env.LDFLAGS }} \
              --action_env=CPPFLAGS=${{ env.CPPFLAGS }} \
              --action_env=BAZEL_LLVM=${{ env.BAZEL_LLVM }}
          fi

      - name: "Extract `pydin` version"
        shell: bash
        run: echo "PYDIN_VERSION=$(cat pydin/VERSION_INFO)" >> $GITHUB_ENV

      - name: Print Pydin version
        shell: bash
        run: |
          echo "pydin version: $PYDIN_VERSION"

      - name: "List files"
        shell: bash
        run: ls -l bazel-bin/external/pydin/

      - name: "Compute file hash"
        id: compute_hash
        shell: bash
        run: |
          FULL_HASH=${{ hashFiles('bazel-bin/external/pydin/**/*') }}
          SHORT_HASH=${FULL_HASH:0:8}  # Take the first 8 characters of the hash
          echo "BUILD_HASH=$SHORT_HASH" >> $GITHUB_ENV

      - name: "Set Python version without period"
        run: echo "PYTHON_VERSION_NO_DOT=${{ matrix.python_version }}." | tr -d '.' >> $GITHUB_ENV

      - name: "Set artifact name (pre-build number check)"
        shell: bash
        run: |
          PYTHON_VERSION=${{ env.PYTHON_VERSION_NO_DOT }}
          echo "ARTIFACT_NAME=pydin-${{ env.PYDIN_VERSION }}-${{ matrix.os_env_name }}-py${PYTHON_VERSION}h${{ env.BUILD_HASH }}" >> $GITHUB_ENV

      - name: "Check build number"
        id: build_number
        uses: actions/github-script@v5
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });
            let buildNumber = artifacts.data.artifacts
              .filter(artifact => artifact.name.startsWith(process.env.ARTIFACT_NAME))
              .length;
            return buildNumber + 1;

      - name: "Set artifact name"
        shell: bash
        run: |
          echo "ARTIFACT_NAME=${{ env.ARTIFACT_NAME }}-${{ steps.build_number.outputs.result }}" >> $GITHUB_ENV

      - name: "Upload artifact"
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: |
            bazel-bin/external/pydin/pydin.tar.gz
            bazel-bin/external/pydin/pydin-tar.manifest
            bazel-bin/external/pydin/pydin.zip
            bazel-bin/external/pydin/pydin-zip.manifest

      - name: "[macOS:arm64] Setup QEMU"
        if: matrix.arch == 'arm64' && runner.os == 'macOS'
        uses: docker/setup-qemu-action@v1

      - name: "[macOS:arm64] Setup Docker Buildx"
        if: matrix.arch == 'arm64' && runner.os == 'macOS'
        uses: docker/setup-buildx-action@v1

      - name: "[macOS:arm64] Build Docker Image"
        if: matrix.arch == 'arm64' && runner.os == 'macOS'
        uses: docker/build-push-action@v2

        with:
          context: .
          file: ./Dockerfile
          platforms: linux/arm64
          push: false

      - name: "[macOS:arm64] Run Docker Image"
        if: matrix.arch == 'arm64'
        run: docker run -v $(pwd):/app -w /app geoffreygarrett/bor:latest bazel build @pydin//:pydin-tar

      - name: "[linux] Adjust permissions for Bazel cache on Linux"
        if: runner.os == 'Linux'
        run: |
          chmod -R 777 "/home/runner/.cache/bazel"
          chmod -R 777 "/home/runner/.cache/bazelisk"
        shell: bash

      - name: "[macOS] Adjust permissions for Bazel cache on macOS"
        if: runner.os == 'macOS'
        run: |
          sudo chmod -R 777 "/private/var/tmp/"
        shell: bash

#      - name: "Adjust permissions for Bazel cache on Windows"
#        if: runner.os == 'Windows'
#        run: icacls "%HOME%/.cache/bazel" /grant Everyone:F /T /C /Q
#        shell: cmd
