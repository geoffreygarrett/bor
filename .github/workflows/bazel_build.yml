name: Build Bazel Targets

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macOS-latest ]
        include:
          - os: macOS-latest
            arch: arm64

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup MSVC
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1.12.1
      #        with:
      #          vsversion: 2019
      #          toolset: 14.XX

      - name: List MSVC dirs
        if: runner.os == 'Windows'
        run: |
          ls -l "${{ env.VCPKG_ROOT }}"
          ls -l "${{ env.VCINSTALLDIR }}"
          ls -l "${{ env.VCToolsInstallDir }}"
          ls -l "${{ env.VCToolsInstallDir }}/bin/HostX64/x64"

      #  Visual C++ build tools seems to be installed at C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC
      #But Bazel can't find the following tools:
      #  VCVARSALL.BAT, cl.exe, link.exe, lib.exe, ml64.exe
      #  for x64 target architecture



      #      - name: Get bazel cache directory path
      #        id: bazel-cache-dir-path
      #        run: echo "dir=~/.cache/bazel" >> $GITHUB_OUTPUT
      #
      #      - name: Cache bazel modules
      #        id: cache-bazel
      #        uses: actions/cache@v3
      #        env:
      #          cache-name: cache-bazel-modules
      #        with:
      #          path: ${{ steps.bazel-cache-dir-path.outputs.dir }}
      #          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/WORKSPACE.bazel') }}
      #          restore-keys: |
      #            ${{ runner.os }}-build-${{ env.cache-name }}-
      #            ${{ runner.os }}-build-
      #            ${{ runner.os }}-
      #Found with vswhere: C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat
      #      - name: List the state of bazel cache
      #        if: steps.cache-bazel.outputs.cache-hit != 'true'
      #        continue-on-error: true
      #        run: ls ~/.cache/bazel


      - name: Find MSVC tools (Windows)
        if: runner.os == 'Windows'
        run: |
          which cl
          which link
          which lib
          which ml64

#      - name: Setup PkgConfig (Windows)
#        if: runner.os == 'Windows'
#        env:
#          PKG_CONFIG_ZIP: "http://ftp.gnome.org/pub/gnome/binaries/win32/dependencies/pkg-config_0.26-1_win32.zip"
#          GETTEXT_RUNTIME_ZIP: "http://ftp.gnome.org/pub/gnome/binaries/win32/dependencies/gettext-runtime_0.18.1.1-2_win32.zip"
#          GLIB_ZIP: "http://ftp.gnome.org/pub/gnome/binaries/win32/glib/2.28/glib_2.28.8-1_win32.zip"
#        run: |
#          curl -LO "${{ env.PKG_CONFIG_ZIP }}"
#          7z x pkg-config_0.26-1_win32.zip -oC:\MinGW\bin pkg-config.exe
#          curl -LO "${{ env.GETTEXT_RUNTIME_ZIP }}"
#          7z x gettext-runtime_0.18.1.1-2_win32.zip -oC:\MinGW\bin intl.dll
#          curl -LO "${{ env.GLIB_ZIP }}"
#          7z x glib_2.28.8-1_win32.zip -oC:\MinGW\bin libglib-2.0-0.dll
#          echo "C:\MinGW\bin" >> $GITHUB_PATH
          
      - name: Install Perl modules
        if: runner.os == 'Windows'
        run: |
          cpan Pod::Usage

      #
      #      - name: Install PkgConfig (Windows)
      #        if: runner.os == 'Windows'
      #        run: |
      #          vcpkg --vcpkg-root "${{ env.VCPKG_ROOT }}" upgrade --no-dry-run --debug
      #          vcpkg --vcpkg-root "${{ env.VCPKG_ROOT }}" install pkgconf

      - name: Prepare Bazel for Windows
        if: runner.os == 'Windows'
        run: |
          curl -LO "https://github.com/redsun82/bazel/releases/download/vs-2022-fix-0.1/bazel-vs2022.exe"
          echo "PATH=$PATH:$(pwd)" >> $GITHUB_ENV
        shell: bash

      - name: Build Bazel Target
        env:
          RUNNER_OS: ${{ runner.os }}
        shell: bash
        run: |
          if [[ "${RUNNER_OS}" == "Windows" ]]; then
            bazel-vs2022 build @pydin//:pydin-zip 
              --action_env=BAZEL_VC=${{ env.VCINSTALLDIR }}
              --action_env=BAZEL_VC_FULL_VERSION=${{ env.VCToolsVersion }}
          else
            # Add commands for other OS types here
            bazel build @pydin//:pydin-tar
          fi

      - name: Extract Pydin version
        run: echo "PYDIN_VERSION=$(cat pydin/VERSION)" >> $GITHUB_ENV
      - name: Print Pydin version
        run: |
          echo "pydin version: $PYDIN_VERSION"
      - name: List files
        run: ls -l bazel-bin/external/pydin/

      - name: lowercase runner.os
        run: |
          echo "RUNNER_OS=${RUNNER_OS,,}" >> $GITHUB_ENV
        env:
          RUNNER_OS: ${{ runner.os }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: pydin-${{ env.PYDIN_VERSION }}-${{ env.RUNNER_OS }}-build${{ github.run_number }}
          path: |
            bazel-bin/external/pydin/pydin.tar.gz
            bazel-bin/external/pydin/pydin.zip

      - name: Setup QEMU
        if: matrix.arch == 'arm64'
        uses: docker/setup-qemu-action@v1
      - name: Setup Docker Buildx
        if: matrix.arch == 'arm64'
        uses: docker/setup-buildx-action@v1
      - name: Build Docker Image
        if: matrix.arch == 'arm64'
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/arm64
          push: false
      - name: Run Docker Image
        if: matrix.arch == 'arm64'
        run: docker run -v $(pwd):/app -w /app geoffreygarrett/bor:latest bazel build @pydin//:pydin-tar

