name: Build Bazel Targets

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        #        os: [ ubuntu-latest, windows-latest, macOS-latest ]
        #        os: [ ubuntu-latest   , windows-latest ]
        include:
          - os: ubuntu-latest
          - os: windows-latest
            compiler: msvc
    #          - os: windows-latest
    #            compiler: clang

    steps:
      - name: "Checkout Repo"
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: "Lowercase runner.os"
        run: |
          echo "RUNNER_OS_LOW=$(echo ${RUNNER_OS} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
        env:
          RUNNER_OS: ${{ runner.os }}
        shell: bash

      - name: "Mount bazel cache"
        uses: actions/cache@v3
        with:
          path: |
            /home/runner/.cache/bazel
            /home/runner/.cache/bazelisk
          key: bazel-${{ env.RUNNER_OS_LOW }}-${{ hashFiles('**/*.bzl', '**/*.BUILD') }}

      - name: "[windows] Setup MSVC"
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1.12.1

      - name: "[windows:clang] Add `msys64/mingw64` to PATH"
        shell: bash
        if: runner.os == 'Windows' && matrix.compiler == 'clang'
        run: echo "C:/msys64/mingw64/bin" >> $GITHUB_PATH

      - name: "[windows] Build Bazel Target"
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          curl -LO "https://github.com/redsun82/bazel/releases/download/vs-2022-fix-0.1/bazel-vs2022.exe"
          $BAZEL_VC = "${{ env.VCINSTALLDIR }}".replace('\', '/')
          if ("${{ matrix.compiler }}" -eq "msvc") {
            ./bazel-vs2022 build @pydin//:pydin-zip `
              --action_env=BAZEL_VC=$BAZEL_VC `
              --extra_toolchains=@local_config_cc//:cc-toolchain-x64_windows-msvc `
          }
          elseif ("${{ matrix.compiler }}" -eq "clang") {
            ./bazel-vs2022 build @pydin//:pydin-zip `
              --action_env=BAZEL_VC=$BAZEL_VC `
              --extra_toolchains=@local_config_cc//:cc-toolchain-x64_windows-clang-cl `
              --extra_execution_platforms=//:x64_windows-clang-cl `
          }

      - name: "[unix] Build Bazel Target"
        if: runner.os != 'Windows'
        shell: bash
        run: |
          if [[ "${RUNNER_OS}" == "Linux" ]]; then
            bazel build @pydin//:pydin-tar --config=unix
          elif [[ "${RUNNER_OS}" == "macOS" ]]; then
            bazel build @pydin//:pydin-tar \
              --config=unix \
              --action_env=CC=$(brew --prefix llvm@15)/bin/clang \
              --action_env=CXX=$(brew --prefix llvm@15)/bin/clang++ \
              --action_env=LDFLAGS=${{ env.LDFLAGS }} \
              --action_env=CPPFLAGS=${{ env.CPPFLAGS }} \
              --action_env=BAZEL_LLVM=${{ env.BAZEL_LLVM }}
          fi

      - name: "Extract `pydin` version"
        run: echo "PYDIN_VERSION=$(cat pydin/VERSION_INFO)" >> $GITHUB_ENV
      - name: Print Pydin version
        run: |
          echo "pydin version: $PYDIN_VERSION"

      - name: "List files"
        run: ls -l bazel-bin/external/pydin/

      - name: "Upload artifact"
        uses: actions/upload-artifact@v3
        with:
          name: pydin-${{ env.PYDIN_VERSION }}-${{ env.RUNNER_OS_LOW }}-build${{ github.run_number }}
          path: |
            bazel-bin/external/pydin/pydin.tar.gz
            bazel-bin/external/pydin/pydin.zip

      - name: "Setup QEMU"
        if: matrix.arch == 'arm64'
        uses: docker/setup-qemu-action@v1

      - name: "Setup Docker Buildx"
        if: matrix.arch == 'arm64'
        uses: docker/setup-buildx-action@v1

      - name: "Build Docker Image"
        if: matrix.arch == 'arm64'
        uses: docker/build-push-action@v2

        with:
          context: .
          file: ./Dockerfile
          platforms: linux/arm64
          push: false

      - name: "Run Docker Image"
        if: matrix.arch == 'arm64'
        run: docker run -v $(pwd):/app -w /app geoffreygarrett/bor:latest bazel build @pydin//:pydin-tar

      - name: "Adjust permissions for Bazel cache"
        run: chmod -R 777 "/home/runner/.cache/bazel"
        shell: bash