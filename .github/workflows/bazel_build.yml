name: Build Bazel Targets

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macOS-latest ]
        include:
          - os: macOS-latest
            arch: arm64

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup MSVC
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1.12.1
      #        with:
      #          vsversion: 2019
      #          toolset: 14.XX

      - name: List MSVC dirs
        if: runner.os == 'Windows'
        run: |
          ls -l "${{ env.VCPKG_ROOT }}"
          ls -l "${{ env.VCINSTALLDIR }}"
          ls -l "${{ env.VCToolsInstallDir }}"
          ls -l "${{ env.VCToolsInstallDir }}/bin"


      - name: Get bazel cache directory path
        id: bazel-cache-dir-path
        run: echo "dir=~/.cache/bazel" >> $GITHUB_OUTPUT

      - name: Cache bazel modules
        id: cache-bazel
        uses: actions/cache@v3
        env:
          cache-name: cache-bazel-modules
        with:
          path: ${{ steps.bazel-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/WORKSPACE.bazel') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: List the state of bazel cache
        if: steps.cache-bazel.outputs.cache-hit != 'true'
        continue-on-error: true
        run: ls ~/.cache/bazel

      - name: Build Bazel Target
        env:
          RUNNER_OS: ${{ runner.os }}
        shell: bash
        run: |
          if [[ "${RUNNER_OS}" == "Windows" ]]; then
            echo "Windows build"
            bazel build @pydin//:pydin-zip 
              --action_env=BAZEL_VC=${{ env.VCINSTALLDIR }}
              --action_env=BAZEL_VC_FULL_VERSION=${{ env.VCToolsVersion }}
          else
            # Add commands for other OS types here
            echo "Non-Windows build"
            bazel build @pydin//:pydin-tar
          fi

      - name: Extract Pydin version
        run: echo "PYDIN_VERSION=$(cat pydin/VERSION)" >> $GITHUB_ENV
      - name: Print Pydin version
        run: |
          echo "pydin version: $PYDIN_VERSION"
      - name: List files
        run: ls -l bazel-bin/external/pydin/

      - name: lowercase runner.os
        run: |
          echo "RUNNER_OS=${RUNNER_OS,,}" >> $GITHUB_ENV
        env:
          RUNNER_OS: ${{ runner.os }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: pydin-${{ env.RUNNER_OS }}-${{ env.PYDIN_VERSION }}-build${{ github.run_number }}
          path: |
            bazel-bin/external/pydin/pydin.tar.gz
            bazel-bin/external/pydin/pydin.zip

      - name: Setup QEMU
        if: matrix.arch == 'arm64'
        uses: docker/setup-qemu-action@v1
      - name: Setup Docker Buildx
        if: matrix.arch == 'arm64'
        uses: docker/setup-buildx-action@v1
      - name: Build Docker Image
        if: matrix.arch == 'arm64'
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/arm64
          push: false
      - name: Run Docker Image
        if: matrix.arch == 'arm64'
        run: docker run -v $(pwd):/app -w /app geoffreygarrett/bor:latest bazel build @pydin//:pydin-tar

