# Enables platform-specific build configurations. Automatically applies flags based on host OS.
# Example: build:windows or build:linux to apply OS-specific flags.
common --enable_platform_specific_config

# OS specific build configurations.
build --cxxopt=-std=c++20
build:macos --linkopt=-Wl,-undefined,dynamic_lookup # https://pybind11.readthedocs.io/en/stable/compiling.html#building-manually | https://github.com/pybind/pybind11/issues/382
build:macos --action_env=ARCHFLAGS="-arch arm64"
build:macos --macos_cpus=arm64
build:macos --macos_minimum_os=13.0
#build:macos --apple_platform_type=macos --cpu=darwin_arm64

# Currently gsl dependency is satisfied via brew on macos.
# TODO: This works well for now, but we should fix build, and improve configurability for local.
build:macos --define use_local_homebrew_gsl=true  # Looks in "/opt/homebrew/opt/gsl/"

# Bazel's C++ rules now allow the selection of toolchains through platforms.
# Use --incompatible_enable_cc_toolchain_resolution to enable this feature.
# # https://docs.bazel.build/versions/4.2.2/platforms-intro.html#c
#
# New way to configure a C++ project:
# $ bazel build //:my_cpp_project --platforms=//:myplatform
#
# Legacy method (replaced by the above command):
# $ bazel build //:my_cpp_project --cpu=... --crosstool_top=... --compiler=...
#
# Note: This mode is not enabled by default due to dependencies in Android and iOS projects.
# Enabling it may require adding platform support for Android and iOS.
# See #7260 and Configuring C++ toolchains for migration guidance.
build --incompatible_enable_cc_toolchain_resolution

# Thrust configuration.
build:linux   --@com_github_nvidia_thrust//:thrust_host_system=TBB --@com_github_nvidia_thrust//:thrust_device_system=CUDA
build:windows --@com_github_nvidia_thrust//:thrust_host_system=TBB --@com_github_nvidia_thrust//:thrust_device_system=CUDA
build:macos   --@com_github_nvidia_thrust//:thrust_host_system=CPP --@com_github_nvidia_thrust//:thrust_device_system=OPENMP

# Specifies the number of concurrent jobs that Bazel will try to execute.
build --jobs=20
#build:windows --action_env=BAZEL_VC="/c/Program Files (x86)/Microsoft Visual Studio/2022/BuildTools"

# Building with optimization and verbose on failures.
build -c opt #--verbose_failures

# Set test output to be streamed directly to the console.
test --test_output=all
test --test_summary=detailed

#run --experimental_enable_bzlmod
#--test_output=<summary, errors, all or streamed> default: "summary"
#Specifies desired output mode. Valid values are 'summary' to output only test status summary,
# 'errors' to also print test logs for failed tests, 'all' to print logs for all tests and
# 'streamed' to output logs for all tests in real time (this will force tests to be executed locally one at a time regardless of --test_strategy value).
#Tags: test_runner, terminal_output, execution
#--test_summary=<short, terse, detailed, none or testcase> default: "short"
#Specifies the desired format of the test summary. Valid values are 'short' to print information only about tests executed, 'terse', to print information only about unsuccessful tests that were run, 'detailed' to print detailed information about failed test cases, 'testcase' to print summary in test case resolution, do not print detailed information about failed test cases and 'none' to omit the summary.
#Tags: terminal_output

# Setting disk cache directory.
#build --disk_cache=~/.cache/bazel

# CPU setting for target and host machines.
# You should replace 'k8' with the appropriate value for your system.
#build --cpu=k8
#build --host_cpu=k8

# Enable debug outputs for sandboxing.
build --sandbox_debug
#build --copt=-Dredacted='\\\"redacted\\\"'

# Debug test with environment variable for shared libraries.
#test -c dbg --test_env=LD_LIBRARY_PATH=/usr/local/lib

